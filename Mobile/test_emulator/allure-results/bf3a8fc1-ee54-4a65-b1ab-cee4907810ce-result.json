{"name": "test_goal_setting_interface", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 30.0s, while waiting for:\nbrowser.element(('id', 'com.fatsecret.android:id/title_text')).has text How much weight would you like to lose?\n\nReason: AssertionError: actual text: What is your gender?\nScreenshot: file:///Users/tembelis/.selene/screenshots/1723554725849/1723554725849.png\nPageSource: file:///Users/tembelis/.selene/screenshots/1723554725849/1723554725849.html", "trace": "fn = <selene.core.conditions.ElementCondition object at 0x106b06b10>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../../.venv/lib/python3.12/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../.venv/lib/python3.12/site-packages/selene/core/condition.py:174: in __call__\n    return self._fn(entity)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nentity = <selene.core.entity.Element object at 0x105a84680>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__ if query_to_str.startswith('<function') else query_to_str\n        )\n        actual = query(entity)\n        if not predicate(actual):\n>           raise AssertionError(f'actual {result}: {actual}')\nE           AssertionError: actual text: What is your gender?\n\n../../.venv/lib/python3.12/site-packages/selene/core/condition.py:146: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_goal_setting_interface():\n        pages = Pages()\n        user_flow = UserFlow()\n    \n        pages.go_to_goal_setting_page()\n        user_flow.click((AppiumBy.XPATH, '//android.widget.TextView[@text=\"Weight loss\"]'))\n        user_flow.click((AppiumBy.ID, 'com.fatsecret.android:id/floating_action_next_button'))\n        user_flow.check_if_user_directed_to_page((AppiumBy.ID, 'com.fatsecret.android:id/title_text'),\n                                                 'How much weight would you like to lose?')\n        user_flow.click((AppiumBy.XPATH, '//android.widget.ImageButton'))\n        user_flow.click((AppiumBy.XPATH, '//android.widget.TextView[@text=\"Maintain my current weight\"]'))\n        user_flow.click((AppiumBy.ID, 'com.fatsecret.android:id/floating_action_next_button'))\n>       user_flow.check_if_user_directed_to_page((AppiumBy.ID, 'com.fatsecret.android:id/title_text'),\n                                                 'What is your gender?')\n\ntest_goal_setting.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_goal_setting.py:16: in check_if_user_directed_to_page\n    browser.element((AppiumBy.ID, 'com.fatsecret.android:id/title_text')).should(\n../../.venv/lib/python3.12/site-packages/selene/core/entity.py:132: in should\n    self.wait.for_(condition)\n../../.venv/lib/python3.12/site-packages/selene/core/wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.conditions.ElementCondition object at 0x106b06b10>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 30.0s, while waiting for:\nE                   browser.element(('id', 'com.fatsecret.android:id/title_text')).has text How much weight would you like to lose?\nE                   \nE                   Reason: AssertionError: actual text: What is your gender?\nE                   Screenshot: file:///Users/tembelis/.selene/screenshots/1723554725849/1723554725849.png\nE                   PageSource: file:///Users/tembelis/.selene/screenshots/1723554725849/1723554725849.html\n\n../../.venv/lib/python3.12/site-packages/selene/core/wait.py:148: TimeoutException"}, "start": 1723554731098, "stop": 1723554772114, "uuid": "106d07b9-be71-40d5-9fe4-35af079469d1", "historyId": "8fd399df7f918587fb4f8baf5e777c02", "testCaseId": "8fd399df7f918587fb4f8baf5e777c02", "fullName": "Mobile.test_emulator.test_goal_setting#test_goal_setting_interface", "labels": [{"name": "parentSuite", "value": "Mobile.test_emulator"}, {"name": "suite", "value": "test_goal_setting"}, {"name": "host", "value": "Sergejs-MacBook-Air.local"}, {"name": "thread", "value": "4174-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Mobile.test_emulator.test_goal_setting"}]}